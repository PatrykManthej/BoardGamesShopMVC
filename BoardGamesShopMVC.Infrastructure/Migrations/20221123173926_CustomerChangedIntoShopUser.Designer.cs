// <auto-generated />
using System;
using BoardGamesShopMVC.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BoardGamesShopMVC.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20221123173926_CustomerChangedIntoShopUser")]
    partial class CustomerChangedIntoShopUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FlatNumber")
                        .HasColumnType("int");

                    b.Property<int>("ShopUserId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShopUserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.BoardGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AverageTimeOfPlay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("MaxNumberOfPlayers")
                        .HasColumnType("int");

                    b.Property<int>("MinNumberOfPlayers")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PublishedYear")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("RecommendedMinimumAge")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("StockId")
                        .IsUnique();

                    b.ToTable("BoardGames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageTimeOfPlay = "30 - 45 min",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Usiądź z przyjaciółmi przy stole i wspólnie zacznijcie budować z niewielkich żetonów łąki, twierdze, całe miasta i drogi, rywalizując między sobą o przejęcie kontroli nad co bardziej atrakcyjnymi lokacjami.",
                            ImageUrl = "\\images\\boardgames\\24cf50d0-b7ed-44f5-8269-20889c9ca1ba_Carcassonne.png",
                            LanguageId = 1,
                            MaxNumberOfPlayers = 5,
                            MinNumberOfPlayers = 2,
                            Name = "Carcassonne",
                            Price = 120m,
                            PublishedYear = 2000,
                            PublisherId = 1,
                            RecommendedMinimumAge = 7,
                            StatusId = 1,
                            StockId = 1
                        },
                        new
                        {
                            Id = 2,
                            AverageTimeOfPlay = "30 min",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Splendor jest dynamiczną i niemal uzależniającą grą w zbieranie żetonów i kart, które tworzą zasoby gracza, umożliwiające mu dalszy rozwój. ",
                            ImageUrl = "\\images\\boardgames\\73c2c91e-e0ba-4405-98f2-4dc99f90229b_Splendor.jpg",
                            LanguageId = 1,
                            MaxNumberOfPlayers = 4,
                            MinNumberOfPlayers = 2,
                            Name = "Splendor",
                            Price = 130m,
                            PublishedYear = 2014,
                            PublisherId = 2,
                            RecommendedMinimumAge = 10,
                            StatusId = 1,
                            StockId = 2
                        },
                        new
                        {
                            Id = 3,
                            AverageTimeOfPlay = "90 - 180 min",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nagle wybudzasz się z hibernacji. Gdy powoli odzyskujesz świadomość i kontrolę nad własnym ciałem, przypominasz sobie, że jesteś na statku kosmicznym \"Nemesis\".",
                            ImageUrl = "\\images\\boardgames\\06718f78-7290-48fe-b889-34f48cd3cdfc_Nemesis.png",
                            LanguageId = 1,
                            MaxNumberOfPlayers = 5,
                            MinNumberOfPlayers = 1,
                            Name = "Nemesis",
                            Price = 500m,
                            PublishedYear = 2018,
                            PublisherId = 2,
                            RecommendedMinimumAge = 12,
                            StatusId = 1,
                            StockId = 3
                        },
                        new
                        {
                            Id = 4,
                            AverageTimeOfPlay = "30 min",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "W stolicy Radżastanu trwają poszukiwania nowego ministra handlu. Jako jeden z najlepszych w swoim fachu, postanawiasz podjąć wyzwanie i zgromadzić więcej bogactw od przeciwnika.",
                            ImageUrl = "\\images\\boardgames\\28dcf532-2dd8-4337-b031-7f89f90a1533_Jaipur.png",
                            LanguageId = 1,
                            MaxNumberOfPlayers = 2,
                            MinNumberOfPlayers = 2,
                            Name = "Jaipur",
                            Price = 85m,
                            PublishedYear = 2009,
                            PublisherId = 2,
                            RecommendedMinimumAge = 10,
                            StatusId = 1,
                            StockId = 4
                        },
                        new
                        {
                            Id = 5,
                            AverageTimeOfPlay = "60 - 120 min",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Oto kooperacyjna gra taktyczna, stworzona przez miłośnika ekonomicznych gier Euro, w której wspólnymi siłami przedzieramy się przez nieustannie ewoluujący świat fantasy, rozgrywając kampanię fabularną na przestrzeni wielu sesji.Każdy gracz wciela się w postać twardego najemnika posiadającego unikalne zdolności i własną motywację. ",
                            ImageUrl = "\\images\\boardgames\\3654de27-3880-416e-918d-669d34843189_Gloomhaven.jpg",
                            LanguageId = 1,
                            MaxNumberOfPlayers = 4,
                            MinNumberOfPlayers = 1,
                            Name = "Gloomhaven",
                            Price = 500m,
                            PublishedYear = 2017,
                            PublisherId = 3,
                            RecommendedMinimumAge = 14,
                            StatusId = 1,
                            StockId = 5
                        },
                        new
                        {
                            Id = 6,
                            AverageTimeOfPlay = "40 - 80 min",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "W uroczej dolinie Everdell, pod gałęziami wysokich drzew, wśród omszałych głazów, rozwija się cywilizacja leśnych zwierząt. Wiele lat minęło od jej początków i wreszcie nadszedł czas, by odkryć nowe tereny i zakładać zupełnie nowe miasta. ",
                            ImageUrl = "\\images\\boardgames\\a51727e6-52ff-4aaa-ae76-3655d0deed84_Everdell.png",
                            LanguageId = 1,
                            MaxNumberOfPlayers = 4,
                            MinNumberOfPlayers = 1,
                            Name = "Everdell ",
                            Price = 200m,
                            PublishedYear = 2018,
                            PublisherId = 2,
                            RecommendedMinimumAge = 13,
                            StatusId = 1,
                            StockId = 6
                        },
                        new
                        {
                            Id = 7,
                            AverageTimeOfPlay = "30 - 45 min",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Przenieś się do malowniczej krainy w Północnej Ameryce i stwórz pełne życia środowisko Kaskadii. W swojej turze wybierz parę płytki oraz żetonu i dołóż je do swojego rozrastającego się ekosystemu. Ułóż jak największe obszary gór, rzek czy prerii oraz rozmieść zwierzęta w punktowanych układach.",
                            ImageUrl = "\\images\\boardgames\\ebb22f92-1c40-4dd1-8266-7d3b55a588be_Kaskadia.png",
                            LanguageId = 1,
                            MaxNumberOfPlayers = 4,
                            MinNumberOfPlayers = 1,
                            Name = "Kaskadia ",
                            Price = 150m,
                            PublishedYear = 2021,
                            PublisherId = 4,
                            RecommendedMinimumAge = 10,
                            StatusId = 1,
                            StockId = 7
                        },
                        new
                        {
                            Id = 8,
                            AverageTimeOfPlay = "30 min",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Patchwork to metoda szycia, w której łączy się małe kawałki materiału w większą całość, tworząc nowy wzór. W przeszłości wykorzystywano ją, żeby zagospodarować niechciane ścinki i skrawki.",
                            ImageUrl = "\\images\\boardgames\\190d7868-947b-4256-9d51-e5f48dfde516_Patchwork.jpg",
                            LanguageId = 1,
                            MaxNumberOfPlayers = 2,
                            MinNumberOfPlayers = 2,
                            Name = "Patchwork",
                            Price = 90m,
                            PublishedYear = 2014,
                            PublisherId = 5,
                            RecommendedMinimumAge = 8,
                            StatusId = 1,
                            StockId = 8
                        },
                        new
                        {
                            Id = 9,
                            AverageTimeOfPlay = "10 min",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dwie drużyny, którym przewodzi dwóch Szefów Wywiadu, próbują jak najszybciej nawiązać kontakt ze wszystkimi swoimi agentami.",
                            ImageUrl = "\\images\\boardgames\\4aa3ec2a-03a3-41ff-b471-e0386f40a5e3_Tajniacy.jpg",
                            LanguageId = 1,
                            MaxNumberOfPlayers = 8,
                            MinNumberOfPlayers = 2,
                            Name = "Tajniacy",
                            Price = 60m,
                            PublishedYear = 2015,
                            PublisherId = 2,
                            RecommendedMinimumAge = 14,
                            StatusId = 1,
                            StockId = 9
                        },
                        new
                        {
                            Id = 10,
                            AverageTimeOfPlay = "30 - 45 min",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Azulejos - oryginalnie były to biało-niebieskie płytki ceramiczne, sprowadzone do Europy przez Maurów. Sławę i popularność w Portugalii zdobyły po wizycie króla Manuela I w południowej Hiszpanii.",
                            ImageUrl = "\\images\\boardgames\\87c21d47-dc5a-41c8-aa5f-d0ff1a932691_Azul.jpg",
                            LanguageId = 1,
                            MaxNumberOfPlayers = 4,
                            MinNumberOfPlayers = 2,
                            Name = "Azul",
                            Price = 230m,
                            PublishedYear = 2017,
                            PublisherId = 5,
                            RecommendedMinimumAge = 8,
                            StatusId = 1,
                            StockId = 10
                        },
                        new
                        {
                            Id = 11,
                            AverageTimeOfPlay = "90 min",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Przenieśmy się w czasie do roku 1670. Zaraza szalejąca w Europie Środkowej od 1348 roku w końcu została przezwyciężona. Na nowo odżywa cywilizacja. Ludzie coraz częściej odnawiają i rozbudowują swoje domostwa.",
                            ImageUrl = "\\images\\boardgames\\a4bb9edb-b355-4b5b-ab51-3aaa4af38e82_Agricola.jpg",
                            LanguageId = 1,
                            MaxNumberOfPlayers = 4,
                            MinNumberOfPlayers = 1,
                            Name = "Agricola ",
                            Price = 270m,
                            PublishedYear = 2007,
                            PublisherId = 5,
                            RecommendedMinimumAge = 12,
                            StatusId = 1,
                            StockId = 11
                        },
                        new
                        {
                            Id = 12,
                            AverageTimeOfPlay = "60 min",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cztery choroby wydostały się na świat i przed drużyną specjalistów z różnych dziedzin stanęło zadanie odnalezienia szczepionek na te epidemie, zanim ludzkość zostanie unicestwiona.",
                            ImageUrl = "\\images\\boardgames\\7803a237-b779-4669-a386-94ef32e1ac7a_Pandemic.jpg",
                            LanguageId = 1,
                            MaxNumberOfPlayers = 4,
                            MinNumberOfPlayers = 2,
                            Name = "Pandemic ",
                            Price = 170m,
                            PublishedYear = 2008,
                            PublisherId = 2,
                            RecommendedMinimumAge = 10,
                            StatusId = 1,
                            StockId = 12
                        });
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.BoardGameCategory", b =>
                {
                    b.Property<int>("BoardGamesId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.HasKey("BoardGamesId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BoardGameCategory");

                    b.HasData(
                        new
                        {
                            BoardGamesId = 1,
                            CategoriesId = 1
                        },
                        new
                        {
                            BoardGamesId = 2,
                            CategoriesId = 1
                        },
                        new
                        {
                            BoardGamesId = 3,
                            CategoriesId = 2
                        },
                        new
                        {
                            BoardGamesId = 4,
                            CategoriesId = 3
                        },
                        new
                        {
                            BoardGamesId = 5,
                            CategoriesId = 2
                        },
                        new
                        {
                            BoardGamesId = 6,
                            CategoriesId = 1
                        },
                        new
                        {
                            BoardGamesId = 7,
                            CategoriesId = 3
                        },
                        new
                        {
                            BoardGamesId = 8,
                            CategoriesId = 3
                        },
                        new
                        {
                            BoardGamesId = 9,
                            CategoriesId = 4
                        },
                        new
                        {
                            BoardGamesId = 10,
                            CategoriesId = 3
                        },
                        new
                        {
                            BoardGamesId = 11,
                            CategoriesId = 1
                        },
                        new
                        {
                            BoardGamesId = 12,
                            CategoriesId = 1
                        });
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ShopUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ShopUserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ShopUserId = 1,
                            TotalAmount = 0m
                        });
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BoardGameId")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoardGameId")
                        .IsUnique();

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Strategiczne",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Przygodowe",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rodzinne",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Imprezowe",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Polski",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Angielski",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShopUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShopUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BoardGameId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BoardGameId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bard",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rebel",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Albi",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lucky Duck Games",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lacerta",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.Recipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShopUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShopUserId");

                    b.ToTable("Recipient");
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.ShopUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShopUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "User1@test.com",
                            IdentityUserId = "655a6e17-70d7-40ba-9a1b-861eafbb842b"
                        });
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 5,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 7,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 2,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 4,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 3,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 6,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 2,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 3,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 9,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 2,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 10,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 2,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 11,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 5,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 12,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 6,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "Admin",
                            ConcurrencyStamp = "50cc3e36-5cdd-43a3-80b3-345db3a277b6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "Employee",
                            ConcurrencyStamp = "8530d008-13c5-4284-8c2b-2d0ffb2611e8",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "User",
                            ConcurrencyStamp = "058c0d8b-2e36-416f-9ec0-a33ff95516a0",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3937b908 - 3ed5 - 4b6d - abf8 - 0ec70e3a18ca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ddb0c1e-3e50-49f4-8d49-5acc418909c6",
                            Email = "admin1@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@TEST.COM",
                            NormalizedUserName = "ADMIN1@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI788uwKCLVLvFoyzXobN8gEcaDONA27142sCDXjicEcBMdT5q4n44yEfzehrx8sWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39218e1c-265f-4adc-8fe5-dd95763166ee",
                            TwoFactorEnabled = false,
                            UserName = "admin1@test.com"
                        },
                        new
                        {
                            Id = "655a6e17-70d7-40ba-9a1b-861eafbb842b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ba34e4f-a864-418c-8ef7-ad2d575a0fa2",
                            Email = "user1@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@TEST.COM",
                            NormalizedUserName = "USER1@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHDWS3UbM0r2Pw8vh5Mq88TZvO/9R5LRYH0s8euiAS7+n6eb6sIC1YWJjBo1a++WbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2ec2347-c449-4fe8-8057-64d00ca92d3b",
                            TwoFactorEnabled = false,
                            UserName = "user1@test.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3937b908 - 3ed5 - 4b6d - abf8 - 0ec70e3a18ca",
                            RoleId = "Admin"
                        },
                        new
                        {
                            UserId = "655a6e17-70d7-40ba-9a1b-861eafbb842b",
                            RoleId = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.Address", b =>
                {
                    b.HasOne("BoardGamesShopMVC.Domain.Model.ShopUser", "ShopUser")
                        .WithMany("Addresses")
                        .HasForeignKey("ShopUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShopUser");
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.BoardGame", b =>
                {
                    b.HasOne("BoardGamesShopMVC.Domain.Model.Language", "LanguageVersion")
                        .WithMany("BoardGames")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGamesShopMVC.Domain.Model.Publisher", "Publisher")
                        .WithMany("BoardGames")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGamesShopMVC.Domain.Model.Stock", "Stock")
                        .WithOne("BoardGame")
                        .HasForeignKey("BoardGamesShopMVC.Domain.Model.BoardGame", "StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageVersion");

                    b.Navigation("Publisher");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.BoardGameCategory", b =>
                {
                    b.HasOne("BoardGamesShopMVC.Domain.Model.BoardGame", "BoardGame")
                        .WithMany()
                        .HasForeignKey("BoardGamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGamesShopMVC.Domain.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardGame");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.Cart", b =>
                {
                    b.HasOne("BoardGamesShopMVC.Domain.Model.ShopUser", "ShopUser")
                        .WithOne("Cart")
                        .HasForeignKey("BoardGamesShopMVC.Domain.Model.Cart", "ShopUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShopUser");
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.CartItem", b =>
                {
                    b.HasOne("BoardGamesShopMVC.Domain.Model.BoardGame", "BoardGame")
                        .WithOne("CartItem")
                        .HasForeignKey("BoardGamesShopMVC.Domain.Model.CartItem", "BoardGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGamesShopMVC.Domain.Model.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardGame");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.Order", b =>
                {
                    b.HasOne("BoardGamesShopMVC.Domain.Model.ShopUser", "ShopUser")
                        .WithMany("Orders")
                        .HasForeignKey("ShopUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShopUser");
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.OrderItem", b =>
                {
                    b.HasOne("BoardGamesShopMVC.Domain.Model.BoardGame", "BoardGame")
                        .WithOne("OrderItem")
                        .HasForeignKey("BoardGamesShopMVC.Domain.Model.OrderItem", "BoardGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGamesShopMVC.Domain.Model.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardGame");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.Recipient", b =>
                {
                    b.HasOne("BoardGamesShopMVC.Domain.Model.ShopUser", "ShopUser")
                        .WithMany("Recipients")
                        .HasForeignKey("ShopUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShopUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.BoardGame", b =>
                {
                    b.Navigation("CartItem")
                        .IsRequired();

                    b.Navigation("OrderItem")
                        .IsRequired();
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.Language", b =>
                {
                    b.Navigation("BoardGames");
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.Publisher", b =>
                {
                    b.Navigation("BoardGames");
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.ShopUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Recipients");
                });

            modelBuilder.Entity("BoardGamesShopMVC.Domain.Model.Stock", b =>
                {
                    b.Navigation("BoardGame")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
